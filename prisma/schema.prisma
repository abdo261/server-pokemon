// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  userName  String
  email     String   @unique
  password  String
  phone     String
  imageFile String?
  role      userRole @default(RESPONSABLE)
  order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  color     String    @unique
  imageFile String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  price      Float
  isPublish  Boolean      @default(true)
  type       ProductType?
  categoryId Int?
  category   Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  imageFile  String?
  payments   Payment[]
  Offer      Offer[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("products")
}

model Payment {
  id          Int       @id @default(autoincrement())
  products    Product[]
  details     Json
  totalePrice Decimal   @db.Decimal(9, 2)
  isPayed     Boolean   @default(true)
  order       Order?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("payments")
}

model Order {
  id                 Int           @id @default(autoincrement())
  status             Ordertatus    @default(EN_COURS_DE_PREPARATION)
  clentName          String
  clientPhoneNumber  String
  delevryPhoneNumber String
  paymentId          Int?          @unique
  payment            Payment?      @relation(fields: [paymentId], references: [id])
  paymentOfferId     Int?          @unique
  paymentOffer       PaymentOffer? @relation(fields: [paymentOfferId], references: [id])
  isAccepted         Boolean       @default(false)
  delevryId          Int?
  delevry            User?         @relation(fields: [delevryId], references: [id], onDelete: SetNull)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("orders")
}

model PaymentOffer {
  id          Int      @id @default(autoincrement())
  offers      Offer[]
  totalePrice Decimal  @db.Decimal(9, 2)
  isPayed     Boolean  @default(true)
  details     Json 
  order       Order?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("payment_offer")
}

model Offer {
  id           Int            @id @default(autoincrement())
  name         String
  products     Product[]
  price        Decimal        @db.Decimal(9, 2)
  isPublish    Boolean        @default(true)
  imageFile    String?
  PaymentOffer PaymentOffer[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("offers")
}

model Day {
  id      Int       @id @default(autoincrement())
  startAt DateTime  @default(now())
  stopeAt DateTime?

  @@map("days")
}

enum Ordertatus {
  EN_COURS_DE_PREPARATION @map("encoure de préparée")
  RAMASSE                 @map("ramacé")
  LIVREE                  @map("livrée")
  REFUSE                  @map("refusé")
}

enum ProductType {
  CHARBON @map("charbon")
  PANINI  @map("panini")
  FOUR    @map("four")
}

enum userRole {
  ADMIN       @map("admin")
  RESPONSABLE @map("responsable")
  LIVREUR     @map("livreur")
}
